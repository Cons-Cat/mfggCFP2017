<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player1_stop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics Constants
phy_walkspeed = 1.75
phy_runspeed = 2.5
phy_acceleration = .25
phy_deceleration = .25
phy_deceleration_air = .0625
phy_jumpheight = 5.5
phy_maxfallspeed = 4
phy_groundpoundspeed = 4.5

phy_editorspeed = 2.2
phy_acceleration_editor = .35
phy_deceleration_editor = .35
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init variables
scr_cmove_init()
c_gravity = 0.3
image_speed = 0.3
dir1 = 1
max_speed = 1
jumping = 0
vert_wrap = 208+32
raise_pixels = 0
slopeVOff = 0 //wtf is this
editing = 0
holding_item = 0
pounding = 0
poundRotateAlarm = 0
poundCounter = 0
groundPoundSpd = 0
groundPoundRaise = 0
poundAngle = 0
poundCanCancel = 0
dir = 0
enemy = 0
item = 0
dead = 0

//Input Constants (will move these later)
global.p1_left = vk_left
global.p1_right = vk_right
global.p1_up = vk_up
global.p1_down = vk_down

global.p1_a = ord("X")
global.p1_b = ord("Z")
global.p1_c = ord("C")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Let the player cancel the ground pound
poundCanCancel = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slam down ground pound
pounding = 4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Continue the ground pound animation
poundRotateAlarm = 0
poundAngle -= 45

if (groundPoundRaise &lt; 2) {
    groundPoundRaise += 0.15
    y -= groundPoundRaise
}

if (groundPoundSpd &gt; 1)
    groundPoundSpd -= 0.3
else
    groundPoundSpd = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Determining physics values
if (room = rm_editor) {
    if (obj_editor_gui.inEditor)
        editing = 1
    else
        editing = 0
}

if (editing) {
    phy_acceleration_imp = phy_acceleration_editor
    phy_deceleration_imp = phy_deceleration_editor
    max_speed = phy_editorspeed
} else {
    phy_acceleration_imp = phy_acceleration
    phy_deceleration_imp = phy_deceleration
}

//Movement
if (!pounding) {
    if keyboard_check(global.p1_left)
    &amp;&amp; not keyboard_check(global.p1_right)
        c_hspeed = max(c_hspeed-phy_acceleration_imp, -max_speed)
    
    if keyboard_check(global.p1_right)
        c_hspeed = min(c_hspeed+phy_acceleration_imp, max_speed)
    
    if (editing) {
        if keyboard_check(global.p1_up)
        &amp;&amp; not keyboard_check(global.p1_down)
            c_vspeed = max(c_vspeed-phy_acceleration_imp, -max_speed)
     
        if keyboard_check(global.p1_down)
            c_vspeed = min(c_vspeed+phy_acceleration_imp, max_speed)
    }
}

//Stopping
if (not keyboard_check(global.p1_left) &amp;&amp; not keyboard_check(global.p1_right))
&amp;&amp; abs(c_hspeed) &gt; 0
 {
 //Deceleration in the air
 if in_air
  {
  if c_hspeed &lt; 0
  c_hspeed = min(c_hspeed+phy_deceleration_air,0);
  if c_hspeed &gt; 0
  c_hspeed = max(c_hspeed-phy_deceleration_air,0);
  }
 
 //Deceleration on the ground
 else
  {
  if c_hspeed &lt; 0
  c_hspeed = min(c_hspeed+phy_deceleration_imp,0);
  if c_hspeed &gt; 0
  c_hspeed = max(c_hspeed-phy_deceleration_imp,0);
  }
}

if (not keyboard_check(global.p1_up) &amp;&amp; not keyboard_check(global.p1_down))
&amp;&amp; abs(c_vspeed) &gt; 0{
 if editing = 1{
  if c_vspeed &lt; 0
  c_vspeed = min(c_vspeed+phy_deceleration_imp,0);
  if c_vspeed &gt; 0
  c_vspeed = max(c_vspeed-phy_deceleration_imp,0);
 }
}

//Jumping
if !(editing)
{
    if (keyboard_check_pressed(global.p1_a))
    &amp;&amp; !(in_air)
    {
        //BEGIN steep slope x momentum
        if (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeR_05x,1,0))
        &amp;&amp; !(collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeL_05x,1,0))
        {
            c_hspeed -= 4;
        }
        if (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeL_05x,1,0))
        &amp;&amp; !(collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeR_05x,1,0))
        {
            c_hspeed += 4;
        }
        //END steep slope x momentum
        jumping = 1;
        c_vspeed = -phy_jumpheight;
    }
}

//Variable Jump
if not keyboard_check(global.p1_a)
&amp;&amp; c_vspeed &lt; 0
&amp;&amp; jumping
c_vspeed += .2;

//Reset Jumping Flag
if c_vspeed &gt;= 0
jumping = 0;

//Ground Pounding
if pounding = 0{
    if in_air{ //Activate ground pound
        if keyboard_check_pressed(global.p1_down){
            if holding_item = 0{
                pounding = 1;
            }
        }
    }
    groundPoundSpd = phy_groundpoundspeed;
    groundPoundRaise = 0;
    poundAngle = 0;
    poundCanCancel = 0;
}
if pounding = 1{ //Play ground pound animation
    if poundRotateAlarm = 0{
        poundRotateAlarm = 1;
        poundCounter += 1;
        alarm[0] = groundPoundSpd;
    }
    if poundCounter = 8{
        pounding = 2;
    }
    c_vspeed = 0;
    
    if c_hspeed != 0{
        c_hspeed /= 1.2;
    }
}
if pounding = 2{
    pounding = 3;
    c_vspeed = 0;
    alarm[1] = 13;
}
if pounding = 3{
    c_hspeed = 0;
    c_vspeed = 0;
}
if pounding = 4{ //Slam down
    c_vspeed = 6;
    c_hspeed = 0;
    
    if poundCanCancel = 0{
        poundCanCancel = 1;
        alarm[2] = 5;
    }
    
    if keyboard_check_pressed(global.p1_up){ //Cancel ground pound
        if poundCanCancel = 2{
            pounding = 0;
            poundCounter = 0;
            poundAngle = 0;
        }
    }
}

//Running
if editing = 0{
 if keyboard_check(global.p1_b)
 max_speed = phy_runspeed;

else
 max_speed = phy_walkspeed;
}

//Lowers the player's speed if it is exceeding the current max
if abs(c_hspeed) &gt; max_speed
c_hspeed -= .1*sign(c_hspeed);
 
//Direction
if editing = 0{
 if c_hspeed != 0
 dir1 = sign(c_hspeed);
}

//Vertical Speed Cap
if (!pounding)
    c_vspeed = min(c_vspeed, phy_maxfallspeed)

//Wrap around room
if (x &lt; 0)
x += room_width;
else if (x &gt; room_width)
x -= room_width;

if editing = 0{
 if (y &lt; 0) 
 {
   //Add here top-boundary penalty.
 }
 else if y &gt; vert_wrap
     y = -16;
} else {
 if y &lt; 32+12{
    y = 32+12;
 }
 if y &gt; 270-12{
    y = 270-12;
    c_vspeed = 0;
 }
}

//Grabbing items
if keyboard_check(global.p1_b){
    if dir1 &gt;= 0{
        with collision_rectangle(x,y-8,x+8,y+8,obj_superparent,false,false){
            if canHold = 1{
                holding = 1;
                holder = other.id;
                other.holding_item = id;
            }
        }
    }
    if dir1 &lt; 0{
        with collision_rectangle(x,y-8,x-8,y+8,obj_superparent,false,false){
            if canHold = 1{
                holding = 1;
                holder = other.id;
                other.holding_item = id;
            }
        }
    }
} else { //Throwing items
    if self.holding_item != 0{
        holding_item.dir1 = self.dir1;
        
        if keyboard_check(global.p1_up){
            holding_item.c_vspeed = -6-self.c_vspeed;
            holding_item.kicked = 0;
        }
        if (c_hspeed != 0) || (c_hspeed = 0 &amp;&amp; !keyboard_check(global.p1_up)){
            holding_item.c_hspeed = self.dir1*2+self.c_hspeed;
        }
        
        holding_item.holding = 0;
        holding_item.holder = 0;
        holding_item = 0;
    }
}

//Custom Movement System (Goes Last)
if editing = 0{
 //Argument decides whether or not to evaluate collision
 scr_cmove_step(1,0);
} else {
 scr_cmove_step(0,1);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites
if editing = 0{
    if in_air &amp;&amp; !collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,par_slope_top,1,0){
        sprite_index = spr_player1_jump;
    } else if c_hspeed != 0{
        sprite_index = spr_player1_walk;
        
        if add_y == 0{
            image_speed = 0.3;
        } else {
            image_speed = 0;
            image_index = 1;
        }
    } else {
        sprite_index = spr_player1_stop;
    }
}

if holding_item != 0{
    if sprite_index = spr_player1_stop{
        sprite_index = spr_player1_stop_hold;
    }
    if sprite_index = spr_player1_walk{
        sprite_index = spr_player1_walk_hold;
    }
    if sprite_index = spr_player1_jump{
        sprite_index = spr_player1_jump_hold;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the Sprites

//Set up palette shader
if (global.current_pal &gt; 0) {

    pal_swap_set(spr_testpalette,global.current_pal,0);
}

//Draw main sprite
draw_sprite_ext(sprite_index,image_index,x,y,dir1,1,poundAngle,c_white,image_alpha);

//Horizontal wrapping
if (x &lt; (abs(sprite_width/2)))
|| (x &gt; room_width-(abs(sprite_width/2))) {

    if (x &lt; (abs(sprite_width/2)))
        draw_sprite_ext(sprite_index,-1,x+room_width,y,dir1,1,poundAngle,c_white,image_alpha);
    else if (x &gt; room_width-(abs(sprite_width/2)))
        draw_sprite_ext(sprite_index,-1,x-room_width,y,dir1,1,poundAngle,c_white,image_alpha);
}

//Reset shader
if (global.current_pal &gt; 0)    
    pal_swap_reset();

//Debug Info
if obj_debug.infowindow_open
 {
 //Draws Mario's sprite origin
 draw_set_color(choose(c_white,c_gray));
 draw_line(x,y,x,y);
 
 //Draw Mario's bounding box
 draw_set_color(c_red);
 draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
 }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug purpose
if (obj_debug.infowindow_open &lt;&gt; 0)
{
    draw_set_color($0000FF);
    draw_set_font(ft_testuse);
    draw_text(0,0,'in_air = '+string(in_air));
    draw_text(0,10,'add_x = '+string(add_x));
    draw_text(0,20,'add_y = '+string(add_y));
    draw_text(0,30,'c_hspeed_slope = '+string(c_hspeed_slope)); 
    draw_set_color($FFFFFF);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
