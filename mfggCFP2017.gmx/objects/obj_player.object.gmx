<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player1_stop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_cmove_init();
c_gravity = 0.3;
image_speed = 0.3;
dir1 = 1;
max_speed = 1;
jumping = 0;
vertWrap = 208+32;
raisePixels = 0;
slopeVOff = 0;

//Physics Constants
phy_walkspeed = 1;
phy_runspeed = 2;
phy_acceleration = .2;
phy_deceleration = .2;
phy_deceleration_air = .1;
phy_jumpheight = 5.5;

//Input Constants (will move these later)
global.p1_left = vk_left;
global.p1_right = vk_right;
global.p1_up = vk_up;
global.p1_down = vk_down;

global.p1_a = ord("X");
global.p1_b = ord("Z");
global.p1_c = ord("C");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement
if keyboard_check(global.p1_left)
&amp;&amp; not keyboard_check(global.p1_right)
c_hspeed = max(c_hspeed-phy_acceleration,-max_speed);

if keyboard_check(global.p1_right)
c_hspeed = min(c_hspeed+phy_acceleration,max_speed);

//Stopping
if (not keyboard_check(global.p1_left) &amp;&amp; not keyboard_check(global.p1_right))
&amp;&amp; abs(c_hspeed) &gt; 0
 {
 //Deceleration in the air
 if in_air
  {
  if c_hspeed &lt; 0
  c_hspeed = min(c_hspeed+phy_deceleration_air,0);
  if c_hspeed &gt; 0
  c_hspeed = max(c_hspeed-phy_deceleration_air,0);
  }
 
 //Deceleration on the ground
 else
  {
  if c_hspeed &lt; 0
  c_hspeed = min(c_hspeed+phy_deceleration,0);
  if c_hspeed &gt; 0
  c_hspeed = max(c_hspeed-phy_deceleration,0);
  }
 }

//Jumping
if keyboard_check_pressed(global.p1_a)
&amp;&amp; not in_air
 {
 jumping = 1;
 c_vspeed = -phy_jumpheight;
 }
 
//Variable Jump
if not keyboard_check(global.p1_a)
&amp;&amp; c_vspeed &lt; 0
&amp;&amp; jumping
c_vspeed += .2;

//Reset Jumping Flag
if c_vspeed &gt;= 0
jumping = 0;
 
//Running
if keyboard_check(global.p1_b)
max_speed = phy_runspeed;

else
max_speed = phy_walkspeed;

//Lowers the player's speed if it is exceeding the current max
if abs(c_hspeed) &gt; max_speed
c_hspeed -= .1*sign(c_hspeed);
 
//Direction
if c_hspeed != 0
dir1 = sign(c_hspeed);

//Vertical Speed Cap
c_vspeed = min(c_vspeed,6);

//Wrap around room
if (x &lt; 0)
x += room_width;
else if (x &gt; room_width)
x -= room_width;

if (y &lt; 0) 
{
  //Add here top-boundary penalty.
}
else if y &gt; vertWrap
    y = -16;

//Custom Movement System (Goes Last)
//Argument decides whether or not to evaluate collision
scr_cmove_step(1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites

if in_air
&amp;&amp; !collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,par_slope,1,0)
sprite_index = spr_player1_jump;

else
 {
 if c_hspeed != 0
  {
  sprite_index = spr_player1_walk;
     
  if add_y == 0
  image_speed = 0.3;
      
  else
   {
   image_speed = 0;
   image_index = 1;
   }
  }
     
 else
 sprite_index = spr_player1_stop;
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the Sprites
draw_sprite_ext(sprite_index,image_index,x,y,dir1,1,0,c_white,image_alpha);

//Horizontal wrapping
if (x &lt; (abs(sprite_width/2)))
|| (x &gt; room_width-(abs(sprite_width/2))) {

    if (x &lt; (abs(sprite_width/2)))
        draw_sprite_ext(sprite_index,-1,x+room_width,y,dir1,1,0,c_white,image_alpha);
    else if (x &gt; room_width-(abs(sprite_width/2)))
        draw_sprite_ext(sprite_index,-1,x-room_width,y,dir1,1,0,c_white,image_alpha);
}

//Debug Info
if obj_debug.infowindow_open
 {
 //Draws Mario's sprite origin
 draw_set_color(choose(c_white,c_gray));
 draw_line(x,y,x,y);
 
 //Draw Mario's bounding box
 draw_set_color(c_red);
 draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
